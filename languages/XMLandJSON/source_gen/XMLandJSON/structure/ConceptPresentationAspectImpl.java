package XMLandJSON.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Convertor;
  private ConceptPresentation props_JSON;
  private ConceptPresentation props_JSONAttribute;
  private ConceptPresentation props_JSONElement;
  private ConceptPresentation props_JSONField;
  private ConceptPresentation props_XML;
  private ConceptPresentation props_XMLAttribute;
  private ConceptPresentation props_XMLElement;
  private ConceptPresentation props_XMLField;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Convertor:
        if (props_Convertor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Convertor");
          props_Convertor = cpb.create();
        }
        return props_Convertor;
      case LanguageConceptSwitch.JSON:
        if (props_JSON == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_JSON = cpb.create();
        }
        return props_JSON;
      case LanguageConceptSwitch.JSONAttribute:
        if (props_JSONAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_JSONAttribute = cpb.create();
        }
        return props_JSONAttribute;
      case LanguageConceptSwitch.JSONElement:
        if (props_JSONElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_JSONElement = cpb.create();
        }
        return props_JSONElement;
      case LanguageConceptSwitch.JSONField:
        if (props_JSONField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_JSONField = cpb.create();
        }
        return props_JSONField;
      case LanguageConceptSwitch.XML:
        if (props_XML == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_XML = cpb.create();
        }
        return props_XML;
      case LanguageConceptSwitch.XMLAttribute:
        if (props_XMLAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_XMLAttribute = cpb.create();
        }
        return props_XMLAttribute;
      case LanguageConceptSwitch.XMLElement:
        if (props_XMLElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_XMLElement = cpb.create();
        }
        return props_XMLElement;
      case LanguageConceptSwitch.XMLField:
        if (props_XMLField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_XMLField = cpb.create();
        }
        return props_XMLField;
    }
    return null;
  }
}
