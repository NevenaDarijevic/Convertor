package XMLandJSON.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Convertor__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x587e888911637068L, "XMLandJSON.structure.Convertor");

  public static final SMethod<Boolean> validateXML_id6mhNkqy2iCp = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("validateXML").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("6mhNkqy2iCp").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(validateXML_id6mhNkqy2iCp);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean validateXML_id6mhNkqy2iCp(@NotNull SNode __thisNode__) {
    for (SNode element : SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.XML$eoIT), LINKS.elements$YyrS)) {
      if ((boolean) XMLElement__BehaviorDescriptor.validateXMLElement_id6mhNkqy0IIJ.invoke(element)) {
        for (SNode attribute : SLinkOperations.getChildren(element, LINKS.attributes$vapk)) {
          if (!((boolean) XMLAttribute__BehaviorDescriptor.validateXMLAttribute_id6mhNkqy6drI.invoke(attribute))) {
            return false;
          }
        }
      } else {
        return false;
      }
      for (SNode field : SLinkOperations.getChildren(element, LINKS.fields$vaRm)) {
        if ((boolean) XMLField__BehaviorDescriptor.validateXMLField_id6mhNkqy6hIH.invoke(field)) {
          for (SNode attribute : SLinkOperations.getChildren(field, LINKS.attributes$c8Rp)) {
            if (!((boolean) XMLAttribute__BehaviorDescriptor.validateXMLAttribute_id6mhNkqy6drI.invoke(attribute))) {
              return false;
            }
          }
        } else {
          return false;
        }
      }
    }
    return true;
  }

  /*package*/ Convertor__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) validateXML_id6mhNkqy2iCp(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink XML$eoIT = MetaAdapterFactory.getContainmentLink(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x587e888911637068L, 0x587e88891163706bL, "XML");
    /*package*/ static final SContainmentLink elements$YyrS = MetaAdapterFactory.getContainmentLink(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x3605bc724f528793L, 0x3605bc724f5287b6L, "elements");
    /*package*/ static final SContainmentLink attributes$vapk = MetaAdapterFactory.getContainmentLink(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x3605bc724f528795L, 0x3605bc724f52b233L, "attributes");
    /*package*/ static final SContainmentLink attributes$c8Rp = MetaAdapterFactory.getContainmentLink(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x3605bc724f54bc13L, 0x3605bc724f54bc16L, "attributes");
    /*package*/ static final SContainmentLink fields$vaRm = MetaAdapterFactory.getContainmentLink(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x3605bc724f528795L, 0x3605bc724f52b235L, "fields");
  }
}
