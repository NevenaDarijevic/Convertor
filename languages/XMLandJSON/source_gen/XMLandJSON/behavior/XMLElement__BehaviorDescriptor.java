package XMLandJSON.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class XMLElement__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x3605bc724f528795L, "XMLandJSON.structure.XMLElement");

  public static final SMethod<Boolean> validateXMLElement_id6mhNkqy0IIJ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("validateXMLElement").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("6mhNkqy0IIJ").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(validateXMLElement_id6mhNkqy0IIJ);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean validateXMLElement_id6mhNkqy0IIJ(@NotNull SNode __thisNode__) {
    if (isEmptyString(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL))) {
      return false;
    }
    if (SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL).length() <= 1) {
      return false;
    }
    if (!(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL).matches("^[a-zA-Z]*$"))) {
      return false;
    }
    for (SNode el : SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(__thisNode__, CONCEPTS.XML$U5, false, false), LINKS.elements$YyrS)) {
      if (SNodeOperations.isInstanceOf(el, CONCEPTS.XMLElement$5e)) {
        SNode node_el = (SNode) el;
        if (node_el != __thisNode__ && !(SPropertyOperations.getString(node_el, PROPS.name$MnvL).equals(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL)))) {
          return false;
        }
      }
    }
    return true;
  }

  /*package*/ XMLElement__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) validateXMLElement_id6mhNkqy0IIJ(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.isEmpty();
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept XMLElement$5e = MetaAdapterFactory.getConcept(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x3605bc724f528795L, "XMLandJSON.structure.XMLElement");
    /*package*/ static final SConcept XML$U5 = MetaAdapterFactory.getConcept(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x3605bc724f528793L, "XMLandJSON.structure.XML");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink elements$YyrS = MetaAdapterFactory.getContainmentLink(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x3605bc724f528793L, 0x3605bc724f5287b6L, "elements");
  }
}
