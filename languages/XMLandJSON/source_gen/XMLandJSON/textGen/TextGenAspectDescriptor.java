package XMLandJSON.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import XMLandJSON.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Convertor:
        return new Convertor_TextGen();
      case LanguageConceptSwitch.XMLAttribute:
        return new XMLAttribute_TextGen();
      case LanguageConceptSwitch.XMLElement:
        return new XMLElement_TextGen();
      case LanguageConceptSwitch.XMLField:
        return new XMLField_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.Convertor$e_)) {
        String fname = getFileName_Convertor(root);
        String ext = getFileExtension_Convertor(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_Convertor(SNode node) {
    return "generatedClass";
  }
  private static String getFileExtension_Convertor(SNode node) {
    return "txt";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Convertor$e_ = MetaAdapterFactory.getConcept(0x5340cbbc1593490dL, 0xa1b08191311313d1L, 0x587e888911637068L, "XMLandJSON.structure.Convertor");
  }
}
